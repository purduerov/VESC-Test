
hBridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ba4  08001ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001094  20000000  08001bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00021094  2**0
                  CONTENTS
  8 .bss          00000080  20001094  20001094  00021094  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20001114  20001114  00021094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00021094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009e71  00000000  00000000  000210c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014fe  00000000  00000000  0002af35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005bef  00000000  00000000  0002c433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  00032028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dcea  00000000  00000000  00033168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000656a  00000000  00000000  00050e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b86af  00000000  00000000  000573bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fa6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016cc  00000000  00000000  0010fae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001094 	.word	0x20001094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b6c 	.word	0x08001b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001098 	.word	0x20001098
 80001c4:	08001b6c 	.word	0x08001b6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b510      	push	{r4, lr}
 80004ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_InitTick+0x40>)
 80004ce:	7818      	ldrb	r0, [r3, #0]
 80004d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <HAL_InitTick+0x44>)
 80004da:	6810      	ldr	r0, [r2, #0]
 80004dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e0:	f000 f896 	bl	8000610 <HAL_SYSTICK_Config>
 80004e4:	b968      	cbnz	r0, 8000502 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e6:	2c0f      	cmp	r4, #15
 80004e8:	d901      	bls.n	80004ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
 80004ec:	e00a      	b.n	8000504 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4621      	mov	r1, r4
 80004f2:	f04f 30ff 	mov.w	r0, #4294967295
 80004f6:	f000 f849 	bl	800058c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <HAL_InitTick+0x40>)
 80004fc:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
 8000500:	e000      	b.n	8000504 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
}
 8000504:	bd10      	pop	{r4, pc}
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	20001090 	.word	0x20001090

08000510 <HAL_Init>:
{
 8000510:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f81b 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ffc8 	bl	80004c8 <HAL_InitTick>
  HAL_MspInit();
 8000538:	f001 fa10 	bl	800195c <HAL_MspInit>
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200010cc 	.word	0x200010cc
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200010cc 	.word	0x200010cc

08000568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	0200      	lsls	r0, r0, #8
 8000576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800057c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000580:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000584:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_NVIC_SetPriority+0x60>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000596:	f1c3 0407 	rsb	r4, r3, #7
 800059a:	2c04      	cmp	r4, #4
 800059c:	bf28      	it	cs
 800059e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	1d1d      	adds	r5, r3, #4
 80005a2:	2d06      	cmp	r5, #6
 80005a4:	d918      	bls.n	80005d8 <HAL_NVIC_SetPriority+0x4c>
 80005a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 35ff 	mov.w	r5, #4294967295
 80005ac:	fa05 f404 	lsl.w	r4, r5, r4
 80005b0:	ea21 0104 	bic.w	r1, r1, r4
 80005b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b6:	fa05 f303 	lsl.w	r3, r5, r3
 80005ba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005be:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005c0:	2800      	cmp	r0, #0
 80005c2:	db0b      	blt.n	80005dc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	0109      	lsls	r1, r1, #4
 80005c6:	b2c9      	uxtb	r1, r1
 80005c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005d4:	bc30      	pop	{r4, r5}
 80005d6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d8:	2300      	movs	r3, #0
 80005da:	e7e5      	b.n	80005a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f000 000f 	and.w	r0, r0, #15
 80005e0:	0109      	lsls	r1, r1, #4
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_NVIC_SetPriority+0x64>)
 80005e6:	5419      	strb	r1, [r3, r0]
 80005e8:	e7f4      	b.n	80005d4 <HAL_NVIC_SetPriority+0x48>
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000ed14 	.word	0xe000ed14

080005f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005f4:	2800      	cmp	r0, #0
 80005f6:	db07      	blt.n	8000608 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f8:	f000 021f 	and.w	r2, r0, #31
 80005fc:	0940      	lsrs	r0, r0, #5
 80005fe:	2301      	movs	r3, #1
 8000600:	4093      	lsls	r3, r2
 8000602:	4a02      	ldr	r2, [pc, #8]	; (800060c <HAL_NVIC_EnableIRQ+0x18>)
 8000604:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e100 	.word	0xe000e100

08000610 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	3801      	subs	r0, #1
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d20a      	bcs.n	800062e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_SYSTICK_Config+0x24>)
 800061a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_SYSTICK_Config+0x28>)
 800061e:	21f0      	movs	r1, #240	; 0xf0
 8000620:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	2000      	movs	r0, #0
 8000626:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800063c:	2300      	movs	r3, #0
 800063e:	2b0f      	cmp	r3, #15
 8000640:	f200 80d7 	bhi.w	80007f2 <HAL_GPIO_Init+0x1b6>
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	e039      	b.n	80006be <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800064a:	2207      	movs	r2, #7
 800064c:	e000      	b.n	8000650 <HAL_GPIO_Init+0x14>
 800064e:	2200      	movs	r2, #0
 8000650:	40aa      	lsls	r2, r5
 8000652:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000654:	3402      	adds	r4, #2
 8000656:	4d67      	ldr	r5, [pc, #412]	; (80007f4 <HAL_GPIO_Init+0x1b8>)
 8000658:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065c:	4a66      	ldr	r2, [pc, #408]	; (80007f8 <HAL_GPIO_Init+0x1bc>)
 800065e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000660:	43f2      	mvns	r2, r6
 8000662:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000666:	684f      	ldr	r7, [r1, #4]
 8000668:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800066c:	d001      	beq.n	8000672 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800066e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8000672:	4c61      	ldr	r4, [pc, #388]	; (80007f8 <HAL_GPIO_Init+0x1bc>)
 8000674:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000676:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000678:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800067c:	684f      	ldr	r7, [r1, #4]
 800067e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000682:	d001      	beq.n	8000688 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000684:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8000688:	4c5b      	ldr	r4, [pc, #364]	; (80007f8 <HAL_GPIO_Init+0x1bc>)
 800068a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800068c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800068e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000692:	684f      	ldr	r7, [r1, #4]
 8000694:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000698:	d001      	beq.n	800069e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800069a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 800069e:	4c56      	ldr	r4, [pc, #344]	; (80007f8 <HAL_GPIO_Init+0x1bc>)
 80006a0:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80006a2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006a4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	684d      	ldr	r5, [r1, #4]
 80006a8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80006ac:	d001      	beq.n	80006b2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80006ae:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80006b2:	4c51      	ldr	r4, [pc, #324]	; (80007f8 <HAL_GPIO_Init+0x1bc>)
 80006b4:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b6:	3301      	adds	r3, #1
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	f200 8098 	bhi.w	80007ee <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80006be:	2201      	movs	r2, #1
 80006c0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	680c      	ldr	r4, [r1, #0]
 80006c4:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 80006c8:	42b2      	cmp	r2, r6
 80006ca:	d1f4      	bne.n	80006b6 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	684c      	ldr	r4, [r1, #4]
 80006ce:	1e65      	subs	r5, r4, #1
 80006d0:	2d01      	cmp	r5, #1
 80006d2:	d903      	bls.n	80006dc <HAL_GPIO_Init+0xa0>
 80006d4:	2c11      	cmp	r4, #17
 80006d6:	d001      	beq.n	80006dc <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d8:	2c12      	cmp	r4, #18
 80006da:	d112      	bne.n	8000702 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 80006dc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006de:	005f      	lsls	r7, r3, #1
 80006e0:	2403      	movs	r4, #3
 80006e2:	40bc      	lsls	r4, r7
 80006e4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006e8:	68cc      	ldr	r4, [r1, #12]
 80006ea:	40bc      	lsls	r4, r7
 80006ec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80006ee:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80006f0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006f2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f6:	684c      	ldr	r4, [r1, #4]
 80006f8:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80006fc:	409a      	lsls	r2, r3
 80006fe:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000700:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000702:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000704:	005f      	lsls	r7, r3, #1
 8000706:	2203      	movs	r2, #3
 8000708:	40ba      	lsls	r2, r7
 800070a:	43d2      	mvns	r2, r2
 800070c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800070e:	688d      	ldr	r5, [r1, #8]
 8000710:	40bd      	lsls	r5, r7
 8000712:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8000714:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000716:	684c      	ldr	r4, [r1, #4]
 8000718:	2c02      	cmp	r4, #2
 800071a:	d001      	beq.n	8000720 <HAL_GPIO_Init+0xe4>
 800071c:	2c12      	cmp	r4, #18
 800071e:	d113      	bne.n	8000748 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8000720:	08dd      	lsrs	r5, r3, #3
 8000722:	3508      	adds	r5, #8
 8000724:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000728:	f003 0407 	and.w	r4, r3, #7
 800072c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000730:	240f      	movs	r4, #15
 8000732:	fa04 f40c 	lsl.w	r4, r4, ip
 8000736:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800073a:	690c      	ldr	r4, [r1, #16]
 800073c:	fa04 f40c 	lsl.w	r4, r4, ip
 8000740:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000744:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000748:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074c:	684c      	ldr	r4, [r1, #4]
 800074e:	f004 0403 	and.w	r4, r4, #3
 8000752:	40bc      	lsls	r4, r7
 8000754:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000756:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000758:	684a      	ldr	r2, [r1, #4]
 800075a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800075e:	d0aa      	beq.n	80006b6 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	2200      	movs	r2, #0
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <HAL_GPIO_Init+0x1c0>)
 8000766:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000768:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800076c:	6454      	str	r4, [r2, #68]	; 0x44
 800076e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000770:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000774:	9201      	str	r2, [sp, #4]
 8000776:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000778:	089c      	lsrs	r4, r3, #2
 800077a:	1ca5      	adds	r5, r4, #2
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <HAL_GPIO_Init+0x1b8>)
 800077e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000782:	f003 0203 	and.w	r2, r3, #3
 8000786:	0095      	lsls	r5, r2, #2
 8000788:	220f      	movs	r2, #15
 800078a:	40aa      	lsls	r2, r5
 800078c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <HAL_GPIO_Init+0x1c4>)
 8000792:	4290      	cmp	r0, r2
 8000794:	f43f af5b 	beq.w	800064e <HAL_GPIO_Init+0x12>
 8000798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800079c:	4290      	cmp	r0, r2
 800079e:	d01a      	beq.n	80007d6 <HAL_GPIO_Init+0x19a>
 80007a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007a4:	4290      	cmp	r0, r2
 80007a6:	d018      	beq.n	80007da <HAL_GPIO_Init+0x19e>
 80007a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ac:	4290      	cmp	r0, r2
 80007ae:	d016      	beq.n	80007de <HAL_GPIO_Init+0x1a2>
 80007b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007b4:	4290      	cmp	r0, r2
 80007b6:	d014      	beq.n	80007e2 <HAL_GPIO_Init+0x1a6>
 80007b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007bc:	4290      	cmp	r0, r2
 80007be:	d012      	beq.n	80007e6 <HAL_GPIO_Init+0x1aa>
 80007c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007c4:	4290      	cmp	r0, r2
 80007c6:	d010      	beq.n	80007ea <HAL_GPIO_Init+0x1ae>
 80007c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007cc:	4290      	cmp	r0, r2
 80007ce:	f43f af3c 	beq.w	800064a <HAL_GPIO_Init+0xe>
 80007d2:	2208      	movs	r2, #8
 80007d4:	e73c      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007d6:	2201      	movs	r2, #1
 80007d8:	e73a      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007da:	2202      	movs	r2, #2
 80007dc:	e738      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007de:	2203      	movs	r2, #3
 80007e0:	e736      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007e2:	2204      	movs	r2, #4
 80007e4:	e734      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007e6:	2205      	movs	r2, #5
 80007e8:	e732      	b.n	8000650 <HAL_GPIO_Init+0x14>
 80007ea:	2206      	movs	r2, #6
 80007ec:	e730      	b.n	8000650 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80007ee:	b003      	add	sp, #12
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f2:	4770      	bx	lr
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000

08000804 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000804:	b912      	cbnz	r2, 800080c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000806:	0409      	lsls	r1, r1, #16
 8000808:	6181      	str	r1, [r0, #24]
  }
}
 800080a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800080c:	6181      	str	r1, [r0, #24]
 800080e:	4770      	bx	lr

08000810 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000810:	2800      	cmp	r0, #0
 8000812:	f000 81e4 	beq.w	8000bde <HAL_RCC_OscConfig+0x3ce>
{
 8000816:	b570      	push	{r4, r5, r6, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	f013 0f01 	tst.w	r3, #1
 8000822:	d03b      	beq.n	800089c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000824:	4ba7      	ldr	r3, [pc, #668]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f003 030c 	and.w	r3, r3, #12
 800082c:	2b04      	cmp	r3, #4
 800082e:	d02c      	beq.n	800088a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000830:	4ba4      	ldr	r3, [pc, #656]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000838:	2b08      	cmp	r3, #8
 800083a:	d021      	beq.n	8000880 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800083c:	6863      	ldr	r3, [r4, #4]
 800083e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000842:	d04f      	beq.n	80008e4 <HAL_RCC_OscConfig+0xd4>
 8000844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000848:	d052      	beq.n	80008f0 <HAL_RCC_OscConfig+0xe0>
 800084a:	4b9e      	ldr	r3, [pc, #632]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800085a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800085c:	6863      	ldr	r3, [r4, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d050      	beq.n	8000904 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000862:	f7ff fe7b 	bl	800055c <HAL_GetTick>
 8000866:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000868:	4b96      	ldr	r3, [pc, #600]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000870:	d114      	bne.n	800089c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000872:	f7ff fe73 	bl	800055c <HAL_GetTick>
 8000876:	1b40      	subs	r0, r0, r5
 8000878:	2864      	cmp	r0, #100	; 0x64
 800087a:	d9f5      	bls.n	8000868 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800087c:	2003      	movs	r0, #3
 800087e:	e1b3      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000880:	4b90      	ldr	r3, [pc, #576]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000888:	d0d8      	beq.n	800083c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800088a:	4b8e      	ldr	r3, [pc, #568]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000892:	d003      	beq.n	800089c <HAL_RCC_OscConfig+0x8c>
 8000894:	6863      	ldr	r3, [r4, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 81a3 	beq.w	8000be2 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	f013 0f02 	tst.w	r3, #2
 80008a2:	d055      	beq.n	8000950 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008a4:	4b87      	ldr	r3, [pc, #540]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f013 0f0c 	tst.w	r3, #12
 80008ac:	d03e      	beq.n	800092c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ae:	4b85      	ldr	r3, [pc, #532]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d033      	beq.n	8000922 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ba:	68e3      	ldr	r3, [r4, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d068      	beq.n	8000992 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008c0:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <HAL_RCC_OscConfig+0x2b8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008c6:	f7ff fe49 	bl	800055c <HAL_GetTick>
 80008ca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008cc:	4b7d      	ldr	r3, [pc, #500]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f013 0f02 	tst.w	r3, #2
 80008d4:	d154      	bne.n	8000980 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008d6:	f7ff fe41 	bl	800055c <HAL_GetTick>
 80008da:	1b40      	subs	r0, r0, r5
 80008dc:	2802      	cmp	r0, #2
 80008de:	d9f5      	bls.n	80008cc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80008e0:	2003      	movs	r0, #3
 80008e2:	e181      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e4:	4a77      	ldr	r2, [pc, #476]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e7b5      	b.n	800085c <HAL_RCC_OscConfig+0x4c>
 80008f0:	4b74      	ldr	r3, [pc, #464]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e7ab      	b.n	800085c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000904:	f7ff fe2a 	bl	800055c <HAL_GetTick>
 8000908:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800090a:	4b6e      	ldr	r3, [pc, #440]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000912:	d0c3      	beq.n	800089c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000914:	f7ff fe22 	bl	800055c <HAL_GetTick>
 8000918:	1b40      	subs	r0, r0, r5
 800091a:	2864      	cmp	r0, #100	; 0x64
 800091c:	d9f5      	bls.n	800090a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800091e:	2003      	movs	r0, #3
 8000920:	e162      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000922:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800092a:	d1c6      	bne.n	80008ba <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800092c:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f013 0f02 	tst.w	r3, #2
 8000934:	d004      	beq.n	8000940 <HAL_RCC_OscConfig+0x130>
 8000936:	68e3      	ldr	r3, [r4, #12]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d001      	beq.n	8000940 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800093c:	2001      	movs	r0, #1
 800093e:	e153      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000940:	4a60      	ldr	r2, [pc, #384]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000942:	6813      	ldr	r3, [r2, #0]
 8000944:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000948:	6921      	ldr	r1, [r4, #16]
 800094a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800094e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	f013 0f08 	tst.w	r3, #8
 8000956:	d040      	beq.n	80009da <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000958:	6963      	ldr	r3, [r4, #20]
 800095a:	b363      	cbz	r3, 80009b6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_RCC_OscConfig+0x2bc>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000962:	f7ff fdfb 	bl	800055c <HAL_GetTick>
 8000966:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000968:	4b56      	ldr	r3, [pc, #344]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f013 0f02 	tst.w	r3, #2
 8000970:	d133      	bne.n	80009da <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000972:	f7ff fdf3 	bl	800055c <HAL_GetTick>
 8000976:	1b40      	subs	r0, r0, r5
 8000978:	2802      	cmp	r0, #2
 800097a:	d9f5      	bls.n	8000968 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800097c:	2003      	movs	r0, #3
 800097e:	e133      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000980:	4a50      	ldr	r2, [pc, #320]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000988:	6921      	ldr	r1, [r4, #16]
 800098a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e7de      	b.n	8000950 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <HAL_RCC_OscConfig+0x2b8>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fde0 	bl	800055c <HAL_GetTick>
 800099c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f013 0f02 	tst.w	r3, #2
 80009a6:	d0d3      	beq.n	8000950 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a8:	f7ff fdd8 	bl	800055c <HAL_GetTick>
 80009ac:	1b40      	subs	r0, r0, r5
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d9f5      	bls.n	800099e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80009b2:	2003      	movs	r0, #3
 80009b4:	e118      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009b6:	4b45      	ldr	r3, [pc, #276]	; (8000acc <HAL_RCC_OscConfig+0x2bc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdce 	bl	800055c <HAL_GetTick>
 80009c0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80009c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c6:	f013 0f02 	tst.w	r3, #2
 80009ca:	d006      	beq.n	80009da <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009cc:	f7ff fdc6 	bl	800055c <HAL_GetTick>
 80009d0:	1b40      	subs	r0, r0, r5
 80009d2:	2802      	cmp	r0, #2
 80009d4:	d9f5      	bls.n	80009c2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80009d6:	2003      	movs	r0, #3
 80009d8:	e106      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	f013 0f04 	tst.w	r3, #4
 80009e0:	d079      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80009ea:	d133      	bne.n	8000a54 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a04:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <HAL_RCC_OscConfig+0x2c0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a0e:	d023      	beq.n	8000a58 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a10:	68a3      	ldr	r3, [r4, #8]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d034      	beq.n	8000a80 <HAL_RCC_OscConfig+0x270>
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d038      	beq.n	8000a8c <HAL_RCC_OscConfig+0x27c>
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a1e:	f022 0201 	bic.w	r2, r2, #1
 8000a22:	671a      	str	r2, [r3, #112]	; 0x70
 8000a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a26:	f022 0204 	bic.w	r2, r2, #4
 8000a2a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a2c:	68a3      	ldr	r3, [r4, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d036      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a32:	f7ff fd93 	bl	800055c <HAL_GetTick>
 8000a36:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a3c:	f013 0f02 	tst.w	r3, #2
 8000a40:	d148      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd8b 	bl	800055c <HAL_GetTick>
 8000a46:	1b80      	subs	r0, r0, r6
 8000a48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a4c:	4298      	cmp	r0, r3
 8000a4e:	d9f3      	bls.n	8000a38 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000a50:	2003      	movs	r0, #3
 8000a52:	e0c9      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8000a54:	2500      	movs	r5, #0
 8000a56:	e7d6      	b.n	8000a06 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_RCC_OscConfig+0x2c0>)
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a60:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a62:	f7ff fd7b 	bl	800055c <HAL_GetTick>
 8000a66:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_RCC_OscConfig+0x2c0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a70:	d1ce      	bne.n	8000a10 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a72:	f7ff fd73 	bl	800055c <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f5      	bls.n	8000a68 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	e0b3      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000a82:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6713      	str	r3, [r2, #112]	; 0x70
 8000a8a:	e7cf      	b.n	8000a2c <HAL_RCC_OscConfig+0x21c>
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a90:	f042 0204 	orr.w	r2, r2, #4
 8000a94:	671a      	str	r2, [r3, #112]	; 0x70
 8000a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a98:	f042 0201 	orr.w	r2, r2, #1
 8000a9c:	671a      	str	r2, [r3, #112]	; 0x70
 8000a9e:	e7c5      	b.n	8000a2c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fd5c 	bl	800055c <HAL_GetTick>
 8000aa4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_RCC_OscConfig+0x2b4>)
 8000aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aaa:	f013 0f02 	tst.w	r3, #2
 8000aae:	d011      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f7ff fd54 	bl	800055c <HAL_GetTick>
 8000ab4:	1b80      	subs	r0, r0, r6
 8000ab6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d9f3      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000abe:	2003      	movs	r0, #3
 8000ac0:	e092      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	42470000 	.word	0x42470000
 8000acc:	42470e80 	.word	0x42470e80
 8000ad0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ad4:	b9ed      	cbnz	r5, 8000b12 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ad6:	69a3      	ldr	r3, [r4, #24]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 8084 	beq.w	8000be6 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ade:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000ae0:	6892      	ldr	r2, [r2, #8]
 8000ae2:	f002 020c 	and.w	r2, r2, #12
 8000ae6:	2a08      	cmp	r2, #8
 8000ae8:	d051      	beq.n	8000b8e <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d017      	beq.n	8000b1e <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aee:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <HAL_RCC_OscConfig+0x3e8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff fd32 	bl	800055c <HAL_GetTick>
 8000af8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000afa:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b02:	d042      	beq.n	8000b8a <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b04:	f7ff fd2a 	bl	800055c <HAL_GetTick>
 8000b08:	1b00      	subs	r0, r0, r4
 8000b0a:	2802      	cmp	r0, #2
 8000b0c:	d9f5      	bls.n	8000afa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000b0e:	2003      	movs	r0, #3
 8000b10:	e06a      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000b14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	e7db      	b.n	8000ad6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_RCC_OscConfig+0x3e8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b24:	f7ff fd1a 	bl	800055c <HAL_GetTick>
 8000b28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b32:	d006      	beq.n	8000b42 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fd12 	bl	800055c <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9f5      	bls.n	8000b2a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8000b3e:	2003      	movs	r0, #3
 8000b40:	e052      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b42:	69e3      	ldr	r3, [r4, #28]
 8000b44:	6a22      	ldr	r2, [r4, #32]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b4a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b50:	0852      	lsrs	r2, r2, #1
 8000b52:	3a01      	subs	r2, #1
 8000b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b5e:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000b60:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <HAL_RCC_OscConfig+0x3e8>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b68:	f7ff fcf8 	bl	800055c <HAL_GetTick>
 8000b6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b76:	d106      	bne.n	8000b86 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b78:	f7ff fcf0 	bl	800055c <HAL_GetTick>
 8000b7c:	1b00      	subs	r0, r0, r4
 8000b7e:	2802      	cmp	r0, #2
 8000b80:	d9f5      	bls.n	8000b6e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8000b82:	2003      	movs	r0, #3
 8000b84:	e030      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b86:	2000      	movs	r0, #0
 8000b88:	e02e      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	e02c      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d02c      	beq.n	8000bec <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_RCC_OscConfig+0x3e4>)
 8000b94:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b96:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8000b9a:	69e2      	ldr	r2, [r4, #28]
 8000b9c:	4291      	cmp	r1, r2
 8000b9e:	d001      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	e021      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ba8:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000baa:	428a      	cmp	r2, r1
 8000bac:	d001      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
 8000bb0:	e01a      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bb4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000bb8:	401a      	ands	r2, r3
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	d001      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e012      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000bc6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	d001      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
 8000bce:	e00b      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bd0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000bd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00a      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	e004      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
}
 8000be0:	4770      	bx	lr
        return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e000      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8000be6:	2000      	movs	r0, #0
}
 8000be8:	b002      	add	sp, #8
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
 8000bee:	e7fb      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e7f9      	b.n	8000be8 <HAL_RCC_OscConfig+0x3d8>
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	42470060 	.word	0x42470060

08000bfc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d044      	beq.n	8000c92 <HAL_RCC_GetSysClockFreq+0x96>
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d001      	beq.n	8000c10 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000c0e:	4770      	bx	lr
{
 8000c10:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c22:	d013      	beq.n	8000c4c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c26:	6859      	ldr	r1, [r3, #4]
 8000c28:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000c30:	fba1 0100 	umull	r0, r1, r1, r0
 8000c34:	f7ff fac8 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c40:	3301      	adds	r3, #1
 8000c42:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c44:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c48:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c54:	461e      	mov	r6, r3
 8000c56:	2700      	movs	r7, #0
 8000c58:	015c      	lsls	r4, r3, #5
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	1ae4      	subs	r4, r4, r3
 8000c5e:	eb65 0507 	sbc.w	r5, r5, r7
 8000c62:	01a9      	lsls	r1, r5, #6
 8000c64:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000c68:	01a0      	lsls	r0, r4, #6
 8000c6a:	1b00      	subs	r0, r0, r4
 8000c6c:	eb61 0105 	sbc.w	r1, r1, r5
 8000c70:	00cb      	lsls	r3, r1, #3
 8000c72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c76:	00c4      	lsls	r4, r0, #3
 8000c78:	19a0      	adds	r0, r4, r6
 8000c7a:	eb43 0107 	adc.w	r1, r3, r7
 8000c7e:	028b      	lsls	r3, r1, #10
 8000c80:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000c84:	0284      	lsls	r4, r0, #10
 8000c86:	4620      	mov	r0, r4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f7ff fa9c 	bl	80001c8 <__aeabi_uldivmod>
 8000c90:	e7d2      	b.n	8000c38 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	00f42400 	.word	0x00f42400
 8000ca0:	017d7840 	.word	0x017d7840

08000ca4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	f000 809e 	beq.w	8000de6 <HAL_RCC_ClockConfig+0x142>
{
 8000caa:	b570      	push	{r4, r5, r6, lr}
 8000cac:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cae:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <HAL_RCC_ClockConfig+0x14c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d209      	bcs.n	8000cce <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cba:	b2cb      	uxtb	r3, r1
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_RCC_ClockConfig+0x14c>)
 8000cbe:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc0:	6813      	ldr	r3, [r2, #0]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
}
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	f013 0f02 	tst.w	r3, #2
 8000cd4:	d017      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd6:	f013 0f04 	tst.w	r3, #4
 8000cda:	d004      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cdc:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000cde:	6893      	ldr	r3, [r2, #8]
 8000ce0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ce4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f013 0f08 	tst.w	r3, #8
 8000cec:	d004      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cee:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000cf0:	6893      	ldr	r3, [r2, #8]
 8000cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cf6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf8:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000cfa:	6893      	ldr	r3, [r2, #8]
 8000cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d00:	68a0      	ldr	r0, [r4, #8]
 8000d02:	4303      	orrs	r3, r0
 8000d04:	6093      	str	r3, [r2, #8]
 8000d06:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	f013 0f01 	tst.w	r3, #1
 8000d0e:	d032      	beq.n	8000d76 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d021      	beq.n	8000d5a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d16:	1e9a      	subs	r2, r3, #2
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	d925      	bls.n	8000d68 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4a35      	ldr	r2, [pc, #212]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	f012 0f02 	tst.w	r2, #2
 8000d24:	d061      	beq.n	8000dea <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d26:	4933      	ldr	r1, [pc, #204]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000d28:	688a      	ldr	r2, [r1, #8]
 8000d2a:	f022 0203 	bic.w	r2, r2, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d32:	f7ff fc13 	bl	800055c <HAL_GetTick>
 8000d36:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	6862      	ldr	r2, [r4, #4]
 8000d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d46:	d016      	beq.n	8000d76 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d48:	f7ff fc08 	bl	800055c <HAL_GetTick>
 8000d4c:	1b80      	subs	r0, r0, r6
 8000d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d9f0      	bls.n	8000d38 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000d56:	2003      	movs	r0, #3
 8000d58:	e7b8      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d62:	d1e0      	bne.n	8000d26 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
 8000d66:	e7b1      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d70:	d1d9      	bne.n	8000d26 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7aa      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_RCC_ClockConfig+0x14c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	d909      	bls.n	8000d96 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d82:	b2ea      	uxtb	r2, r5
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_RCC_ClockConfig+0x14c>)
 8000d86:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	42ab      	cmp	r3, r5
 8000d90:	d001      	beq.n	8000d96 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000d92:	2001      	movs	r0, #1
 8000d94:	e79a      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	f013 0f04 	tst.w	r3, #4
 8000d9c:	d006      	beq.n	8000dac <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000da0:	6893      	ldr	r3, [r2, #8]
 8000da2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000da6:	68e1      	ldr	r1, [r4, #12]
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	f013 0f08 	tst.w	r3, #8
 8000db2:	d007      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000db6:	6893      	ldr	r3, [r2, #8]
 8000db8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dbc:	6921      	ldr	r1, [r4, #16]
 8000dbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dc2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc4:	f7ff ff1a 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RCC_ClockConfig+0x150>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_RCC_ClockConfig+0x154>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	40d8      	lsrs	r0, r3
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_RCC_ClockConfig+0x158>)
 8000dd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_RCC_ClockConfig+0x15c>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	f7ff fb73 	bl	80004c8 <HAL_InitTick>
  return HAL_OK;
 8000de2:	2000      	movs	r0, #0
 8000de4:	e772      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	4770      	bx	lr
        return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	e76e      	b.n	8000ccc <HAL_RCC_ClockConfig+0x28>
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	08001b84 	.word	0x08001b84
 8000dfc:	20001090 	.word	0x20001090
 8000e00:	20000004 	.word	0x20000004

08000e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000e04:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e06:	6a03      	ldr	r3, [r0, #32]
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e0e:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e10:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e12:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e14:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e18:	680b      	ldr	r3, [r1, #0]
 8000e1a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000e1c:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e20:	688b      	ldr	r3, [r1, #8]
 8000e22:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e24:	4d10      	ldr	r5, [pc, #64]	; (8000e68 <TIM_OC1_SetConfig+0x64>)
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	d003      	beq.n	8000e32 <TIM_OC1_SetConfig+0x2e>
 8000e2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e2e:	42a8      	cmp	r0, r5
 8000e30:	d105      	bne.n	8000e3e <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e32:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e36:	68cd      	ldr	r5, [r1, #12]
 8000e38:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e3a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e3e:	4d0a      	ldr	r5, [pc, #40]	; (8000e68 <TIM_OC1_SetConfig+0x64>)
 8000e40:	42a8      	cmp	r0, r5
 8000e42:	d003      	beq.n	8000e4c <TIM_OC1_SetConfig+0x48>
 8000e44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e48:	42a8      	cmp	r0, r5
 8000e4a:	d105      	bne.n	8000e58 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8000e50:	694d      	ldr	r5, [r1, #20]
 8000e52:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e54:	698a      	ldr	r2, [r1, #24]
 8000e56:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e58:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e5a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e5c:	684a      	ldr	r2, [r1, #4]
 8000e5e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e60:	6203      	str	r3, [r0, #32]
}
 8000e62:	bc30      	pop	{r4, r5}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40010000 	.word	0x40010000

08000e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000e6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e6e:	6a03      	ldr	r3, [r0, #32]
 8000e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e78:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e7a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e7c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e80:	680d      	ldr	r5, [r1, #0]
 8000e82:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e88:	688d      	ldr	r5, [r1, #8]
 8000e8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000e8e:	4d12      	ldr	r5, [pc, #72]	; (8000ed8 <TIM_OC3_SetConfig+0x6c>)
 8000e90:	42a8      	cmp	r0, r5
 8000e92:	d003      	beq.n	8000e9c <TIM_OC3_SetConfig+0x30>
 8000e94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e98:	42a8      	cmp	r0, r5
 8000e9a:	d106      	bne.n	8000eaa <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ea0:	68cd      	ldr	r5, [r1, #12]
 8000ea2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000eaa:	4d0b      	ldr	r5, [pc, #44]	; (8000ed8 <TIM_OC3_SetConfig+0x6c>)
 8000eac:	42a8      	cmp	r0, r5
 8000eae:	d003      	beq.n	8000eb8 <TIM_OC3_SetConfig+0x4c>
 8000eb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb4:	42a8      	cmp	r0, r5
 8000eb6:	d107      	bne.n	8000ec8 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000eb8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ebc:	694d      	ldr	r5, [r1, #20]
 8000ebe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ec2:	698d      	ldr	r5, [r1, #24]
 8000ec4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ec8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000eca:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ecc:	684a      	ldr	r2, [r1, #4]
 8000ece:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ed0:	6203      	str	r3, [r0, #32]
}
 8000ed2:	bc30      	pop	{r4, r5}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40010000 	.word	0x40010000

08000edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000edc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ede:	6a03      	ldr	r3, [r0, #32]
 8000ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ee6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ee8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000eea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000eec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ef0:	680d      	ldr	r5, [r1, #0]
 8000ef2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000efa:	688d      	ldr	r5, [r1, #8]
 8000efc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f00:	4d09      	ldr	r5, [pc, #36]	; (8000f28 <TIM_OC4_SetConfig+0x4c>)
 8000f02:	42a8      	cmp	r0, r5
 8000f04:	d003      	beq.n	8000f0e <TIM_OC4_SetConfig+0x32>
 8000f06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0a:	42a8      	cmp	r0, r5
 8000f0c:	d104      	bne.n	8000f18 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f0e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f12:	694d      	ldr	r5, [r1, #20]
 8000f14:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000f1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000f1c:	684a      	ldr	r2, [r1, #4]
 8000f1e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f20:	6203      	str	r3, [r0, #32]
}
 8000f22:	bc30      	pop	{r4, r5}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40010000 	.word	0x40010000

08000f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f2c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f2e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f30:	6a04      	ldr	r4, [r0, #32]
 8000f32:	f024 0401 	bic.w	r4, r4, #1
 8000f36:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f38:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f3a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f3e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f42:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000f46:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f48:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f4a:	6203      	str	r3, [r0, #32]
}
 8000f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f52:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f54:	6a03      	ldr	r3, [r0, #32]
 8000f56:	f023 0310 	bic.w	r3, r3, #16
 8000f5a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f5c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000f5e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f60:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f64:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f6c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000f70:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f72:	6203      	str	r3, [r0, #32]
}
 8000f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000f7a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f80:	4319      	orrs	r1, r3
 8000f82:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f86:	6081      	str	r1, [r0, #8]
}
 8000f88:	4770      	bx	lr

08000f8a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f8a:	6802      	ldr	r2, [r0, #0]
 8000f8c:	68d3      	ldr	r3, [r2, #12]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f94:	6802      	ldr	r2, [r0, #0]
 8000f96:	6893      	ldr	r3, [r2, #8]
 8000f98:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f9c:	2b06      	cmp	r3, #6
 8000f9e:	d003      	beq.n	8000fa8 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	4770      	bx	lr

08000fac <HAL_TIM_PWM_MspInit>:
}
 8000fac:	4770      	bx	lr

08000fae <HAL_TIM_OC_DelayElapsedCallback>:
}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_TIM_IC_CaptureCallback>:
}
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_TIM_TriggerCallback>:
}
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_TIM_IRQHandler>:
{
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fba:	6803      	ldr	r3, [r0, #0]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	f012 0f02 	tst.w	r2, #2
 8000fc2:	d011      	beq.n	8000fe8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	f012 0f02 	tst.w	r2, #2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fcc:	f06f 0202 	mvn.w	r2, #2
 8000fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fd6:	6803      	ldr	r3, [r0, #0]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f013 0f03 	tst.w	r3, #3
 8000fde:	d070      	beq.n	80010c2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8000fe0:	f7ff ffe6 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	f012 0f04 	tst.w	r2, #4
 8000ff0:	d012      	beq.n	8001018 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	f012 0f04 	tst.w	r2, #4
 8000ff8:	d00e      	beq.n	8001018 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ffa:	f06f 0204 	mvn.w	r2, #4
 8000ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001000:	2302      	movs	r3, #2
 8001002:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f413 7f40 	tst.w	r3, #768	; 0x300
 800100c:	d05f      	beq.n	80010ce <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff ffce 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001014:	2300      	movs	r3, #0
 8001016:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	f012 0f08 	tst.w	r2, #8
 8001020:	d012      	beq.n	8001048 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	f012 0f08 	tst.w	r2, #8
 8001028:	d00e      	beq.n	8001048 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800102a:	f06f 0208 	mvn.w	r2, #8
 800102e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001030:	2304      	movs	r3, #4
 8001032:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f013 0f03 	tst.w	r3, #3
 800103c:	d04e      	beq.n	80010dc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff ffb6 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001044:	2300      	movs	r3, #0
 8001046:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	f012 0f10 	tst.w	r2, #16
 8001050:	d012      	beq.n	8001078 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	f012 0f10 	tst.w	r2, #16
 8001058:	d00e      	beq.n	8001078 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800105a:	f06f 0210 	mvn.w	r2, #16
 800105e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001060:	2308      	movs	r3, #8
 8001062:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f413 7f40 	tst.w	r3, #768	; 0x300
 800106c:	d03d      	beq.n	80010ea <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff ff9e 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001074:	2300      	movs	r3, #0
 8001076:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	f012 0f01 	tst.w	r2, #1
 8001080:	d003      	beq.n	800108a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	f012 0f01 	tst.w	r2, #1
 8001088:	d136      	bne.n	80010f8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001092:	d003      	beq.n	800109c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	f012 0f80 	tst.w	r2, #128	; 0x80
 800109a:	d134      	bne.n	8001106 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010a4:	d003      	beq.n	80010ae <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010ac:	d132      	bne.n	8001114 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	f012 0f20 	tst.w	r2, #32
 80010b6:	d003      	beq.n	80010c0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	f012 0f20 	tst.w	r2, #32
 80010be:	d130      	bne.n	8001122 <HAL_TIM_IRQHandler+0x16c>
}
 80010c0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c2:	f7ff ff74 	bl	8000fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff ff73 	bl	8000fb2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010cc:	e78a      	b.n	8000fe4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff ff6d 	bl	8000fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff6c 	bl	8000fb2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010da:	e79b      	b.n	8001014 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff ff66 	bl	8000fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff ff65 	bl	8000fb2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010e8:	e7ac      	b.n	8001044 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff ff5f 	bl	8000fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff ff5e 	bl	8000fb2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010f6:	e7bd      	b.n	8001074 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010f8:	f06f 0201 	mvn.w	r2, #1
 80010fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 faac 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
 8001104:	e7c1      	b.n	800108a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001106:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800110a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800110c:	4620      	mov	r0, r4
 800110e:	f000 fa3a 	bl	8001586 <HAL_TIMEx_BreakCallback>
 8001112:	e7c3      	b.n	800109c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001118:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff ff4a 	bl	8000fb4 <HAL_TIM_TriggerCallback>
 8001120:	e7c5      	b.n	80010ae <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001122:	f06f 0220 	mvn.w	r2, #32
 8001126:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001128:	4620      	mov	r0, r4
 800112a:	f000 fa2b 	bl	8001584 <HAL_TIMEx_CommutCallback>
}
 800112e:	e7c7      	b.n	80010c0 <HAL_TIM_IRQHandler+0x10a>

08001130 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001130:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001132:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <TIM_Base_SetConfig+0xc4>)
 8001134:	4290      	cmp	r0, r2
 8001136:	d012      	beq.n	800115e <TIM_Base_SetConfig+0x2e>
 8001138:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800113c:	d00f      	beq.n	800115e <TIM_Base_SetConfig+0x2e>
 800113e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001142:	4290      	cmp	r0, r2
 8001144:	d00b      	beq.n	800115e <TIM_Base_SetConfig+0x2e>
 8001146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114a:	4290      	cmp	r0, r2
 800114c:	d007      	beq.n	800115e <TIM_Base_SetConfig+0x2e>
 800114e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001152:	4290      	cmp	r0, r2
 8001154:	d003      	beq.n	800115e <TIM_Base_SetConfig+0x2e>
 8001156:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800115a:	4290      	cmp	r0, r2
 800115c:	d103      	bne.n	8001166 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800115e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001162:	684a      	ldr	r2, [r1, #4]
 8001164:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001166:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <TIM_Base_SetConfig+0xc4>)
 8001168:	4290      	cmp	r0, r2
 800116a:	d02a      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 800116c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001170:	d027      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 8001172:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001176:	4290      	cmp	r0, r2
 8001178:	d023      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 800117a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800117e:	4290      	cmp	r0, r2
 8001180:	d01f      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 8001182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001186:	4290      	cmp	r0, r2
 8001188:	d01b      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 800118a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800118e:	4290      	cmp	r0, r2
 8001190:	d017      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 8001192:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001196:	4290      	cmp	r0, r2
 8001198:	d013      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 800119a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119e:	4290      	cmp	r0, r2
 80011a0:	d00f      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 80011a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a6:	4290      	cmp	r0, r2
 80011a8:	d00b      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 80011aa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80011ae:	4290      	cmp	r0, r2
 80011b0:	d007      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 80011b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d003      	beq.n	80011c2 <TIM_Base_SetConfig+0x92>
 80011ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011be:	4290      	cmp	r0, r2
 80011c0:	d103      	bne.n	80011ca <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80011c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c6:	68ca      	ldr	r2, [r1, #12]
 80011c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ce:	694a      	ldr	r2, [r1, #20]
 80011d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d4:	688b      	ldr	r3, [r1, #8]
 80011d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <TIM_Base_SetConfig+0xc4>)
 80011de:	4298      	cmp	r0, r3
 80011e0:	d003      	beq.n	80011ea <TIM_Base_SetConfig+0xba>
 80011e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d101      	bne.n	80011ee <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80011ea:	690b      	ldr	r3, [r1, #16]
 80011ec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011ee:	2301      	movs	r3, #1
 80011f0:	6143      	str	r3, [r0, #20]
}
 80011f2:	4770      	bx	lr
 80011f4:	40010000 	.word	0x40010000

080011f8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80011f8:	b1a8      	cbz	r0, 8001226 <HAL_TIM_Base_Init+0x2e>
{
 80011fa:	b510      	push	{r4, lr}
 80011fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80011fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001202:	b15b      	cbz	r3, 800121c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001204:	2302      	movs	r3, #2
 8001206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800120a:	1d21      	adds	r1, r4, #4
 800120c:	6820      	ldr	r0, [r4, #0]
 800120e:	f7ff ff8f 	bl	8001130 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001212:	2301      	movs	r3, #1
 8001214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001218:	2000      	movs	r0, #0
}
 800121a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800121c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001220:	f000 fbb8 	bl	8001994 <HAL_TIM_Base_MspInit>
 8001224:	e7ee      	b.n	8001204 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
}
 8001228:	4770      	bx	lr

0800122a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800122a:	b1a8      	cbz	r0, 8001258 <HAL_TIM_PWM_Init+0x2e>
{
 800122c:	b510      	push	{r4, lr}
 800122e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001230:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001234:	b15b      	cbz	r3, 800124e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001236:	2302      	movs	r3, #2
 8001238:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800123c:	1d21      	adds	r1, r4, #4
 800123e:	6820      	ldr	r0, [r4, #0]
 8001240:	f7ff ff76 	bl	8001130 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001244:	2301      	movs	r3, #1
 8001246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800124a:	2000      	movs	r0, #0
}
 800124c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800124e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001252:	f7ff feab 	bl	8000fac <HAL_TIM_PWM_MspInit>
 8001256:	e7ee      	b.n	8001236 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
}
 800125a:	4770      	bx	lr

0800125c <TIM_OC2_SetConfig>:
{
 800125c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800125e:	6a03      	ldr	r3, [r0, #32]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001266:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001268:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800126a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800126c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001270:	680d      	ldr	r5, [r1, #0]
 8001272:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001276:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800127a:	688d      	ldr	r5, [r1, #8]
 800127c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001280:	4d11      	ldr	r5, [pc, #68]	; (80012c8 <TIM_OC2_SetConfig+0x6c>)
 8001282:	42a8      	cmp	r0, r5
 8001284:	d003      	beq.n	800128e <TIM_OC2_SetConfig+0x32>
 8001286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800128a:	42a8      	cmp	r0, r5
 800128c:	d106      	bne.n	800129c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800128e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001292:	68cd      	ldr	r5, [r1, #12]
 8001294:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800129c:	4d0a      	ldr	r5, [pc, #40]	; (80012c8 <TIM_OC2_SetConfig+0x6c>)
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d003      	beq.n	80012aa <TIM_OC2_SetConfig+0x4e>
 80012a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d107      	bne.n	80012ba <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012aa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80012ae:	694d      	ldr	r5, [r1, #20]
 80012b0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012b4:	698d      	ldr	r5, [r1, #24]
 80012b6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80012ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012be:	684a      	ldr	r2, [r1, #4]
 80012c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012c2:	6203      	str	r3, [r0, #32]
}
 80012c4:	bc30      	pop	{r4, r5}
 80012c6:	4770      	bx	lr
 80012c8:	40010000 	.word	0x40010000

080012cc <HAL_TIM_PWM_ConfigChannel>:
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d066      	beq.n	80013a4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80012d6:	460d      	mov	r5, r1
 80012d8:	4604      	mov	r4, r0
 80012da:	2301      	movs	r3, #1
 80012dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80012e6:	2a0c      	cmp	r2, #12
 80012e8:	d81a      	bhi.n	8001320 <HAL_TIM_PWM_ConfigChannel+0x54>
 80012ea:	e8df f002 	tbb	[pc, r2]
 80012ee:	1907      	.short	0x1907
 80012f0:	19201919 	.word	0x19201919
 80012f4:	19341919 	.word	0x19341919
 80012f8:	1919      	.short	0x1919
 80012fa:	47          	.byte	0x47
 80012fb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012fc:	6800      	ldr	r0, [r0, #0]
 80012fe:	f7ff fd81 	bl	8000e04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	6993      	ldr	r3, [r2, #24]
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	6993      	ldr	r3, [r2, #24]
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	6993      	ldr	r3, [r2, #24]
 800131a:	6929      	ldr	r1, [r5, #16]
 800131c:	430b      	orrs	r3, r1
 800131e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001320:	2301      	movs	r3, #1
 8001322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001326:	2000      	movs	r0, #0
 8001328:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800132c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800132e:	6800      	ldr	r0, [r0, #0]
 8001330:	f7ff ff94 	bl	800125c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	6993      	ldr	r3, [r2, #24]
 8001338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800133c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	6993      	ldr	r3, [r2, #24]
 8001342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001346:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001348:	6822      	ldr	r2, [r4, #0]
 800134a:	6993      	ldr	r3, [r2, #24]
 800134c:	6929      	ldr	r1, [r5, #16]
 800134e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001352:	6193      	str	r3, [r2, #24]
      break;
 8001354:	e7e4      	b.n	8001320 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001356:	6800      	ldr	r0, [r0, #0]
 8001358:	f7ff fd88 	bl	8000e6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	69d3      	ldr	r3, [r2, #28]
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	69d3      	ldr	r3, [r2, #28]
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001370:	6822      	ldr	r2, [r4, #0]
 8001372:	69d3      	ldr	r3, [r2, #28]
 8001374:	6929      	ldr	r1, [r5, #16]
 8001376:	430b      	orrs	r3, r1
 8001378:	61d3      	str	r3, [r2, #28]
      break;
 800137a:	e7d1      	b.n	8001320 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800137c:	6800      	ldr	r0, [r0, #0]
 800137e:	f7ff fdad 	bl	8000edc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	69d3      	ldr	r3, [r2, #28]
 8001386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800138a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800138c:	6822      	ldr	r2, [r4, #0]
 800138e:	69d3      	ldr	r3, [r2, #28]
 8001390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001394:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	69d3      	ldr	r3, [r2, #28]
 800139a:	6929      	ldr	r1, [r5, #16]
 800139c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013a0:	61d3      	str	r3, [r2, #28]
      break;
 80013a2:	e7bd      	b.n	8001320 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80013a4:	2002      	movs	r0, #2
 80013a6:	e7c1      	b.n	800132c <HAL_TIM_PWM_ConfigChannel+0x60>

080013a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80013a8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80013aa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013ac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013b0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80013b4:	430b      	orrs	r3, r1
 80013b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013b8:	6083      	str	r3, [r0, #8]
}
 80013ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80013c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d066      	beq.n	8001496 <HAL_TIM_ConfigClockSource+0xd6>
{
 80013c8:	b510      	push	{r4, lr}
 80013ca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80013cc:	2301      	movs	r3, #1
 80013ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80013e4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80013e6:	680b      	ldr	r3, [r1, #0]
 80013e8:	2b40      	cmp	r3, #64	; 0x40
 80013ea:	d04a      	beq.n	8001482 <HAL_TIM_ConfigClockSource+0xc2>
 80013ec:	d913      	bls.n	8001416 <HAL_TIM_ConfigClockSource+0x56>
 80013ee:	2b60      	cmp	r3, #96	; 0x60
 80013f0:	d03d      	beq.n	800146e <HAL_TIM_ConfigClockSource+0xae>
 80013f2:	d91e      	bls.n	8001432 <HAL_TIM_ConfigClockSource+0x72>
 80013f4:	2b70      	cmp	r3, #112	; 0x70
 80013f6:	d028      	beq.n	800144a <HAL_TIM_ConfigClockSource+0x8a>
 80013f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013fc:	d130      	bne.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80013fe:	68cb      	ldr	r3, [r1, #12]
 8001400:	684a      	ldr	r2, [r1, #4]
 8001402:	6889      	ldr	r1, [r1, #8]
 8001404:	6800      	ldr	r0, [r0, #0]
 8001406:	f7ff ffcf 	bl	80013a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	6893      	ldr	r3, [r2, #8]
 800140e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001412:	6093      	str	r3, [r2, #8]
      break;
 8001414:	e024      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001416:	2b10      	cmp	r3, #16
 8001418:	d006      	beq.n	8001428 <HAL_TIM_ConfigClockSource+0x68>
 800141a:	d904      	bls.n	8001426 <HAL_TIM_ConfigClockSource+0x66>
 800141c:	2b20      	cmp	r3, #32
 800141e:	d003      	beq.n	8001428 <HAL_TIM_ConfigClockSource+0x68>
 8001420:	2b30      	cmp	r3, #48	; 0x30
 8001422:	d001      	beq.n	8001428 <HAL_TIM_ConfigClockSource+0x68>
 8001424:	e01c      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
 8001426:	b9db      	cbnz	r3, 8001460 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001428:	4619      	mov	r1, r3
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	f7ff fda5 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 8001430:	e016      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001432:	2b50      	cmp	r3, #80	; 0x50
 8001434:	d114      	bne.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001436:	68ca      	ldr	r2, [r1, #12]
 8001438:	6849      	ldr	r1, [r1, #4]
 800143a:	6800      	ldr	r0, [r0, #0]
 800143c:	f7ff fd76 	bl	8000f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001440:	2150      	movs	r1, #80	; 0x50
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f7ff fd99 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 8001448:	e00a      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800144a:	68cb      	ldr	r3, [r1, #12]
 800144c:	684a      	ldr	r2, [r1, #4]
 800144e:	6889      	ldr	r1, [r1, #8]
 8001450:	6800      	ldr	r0, [r0, #0]
 8001452:	f7ff ffa9 	bl	80013a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800145a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800145e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001460:	2301      	movs	r3, #1
 8001462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001466:	2000      	movs	r0, #0
 8001468:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800146c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800146e:	68ca      	ldr	r2, [r1, #12]
 8001470:	6849      	ldr	r1, [r1, #4]
 8001472:	6800      	ldr	r0, [r0, #0]
 8001474:	f7ff fd6d 	bl	8000f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001478:	2160      	movs	r1, #96	; 0x60
 800147a:	6820      	ldr	r0, [r4, #0]
 800147c:	f7ff fd7d 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 8001480:	e7ee      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001482:	68ca      	ldr	r2, [r1, #12]
 8001484:	6849      	ldr	r1, [r1, #4]
 8001486:	6800      	ldr	r0, [r0, #0]
 8001488:	f7ff fd50 	bl	8000f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	f7ff fd73 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 8001494:	e7e4      	b.n	8001460 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8001496:	2002      	movs	r0, #2
}
 8001498:	4770      	bx	lr

0800149a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800149a:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800149c:	f001 011f 	and.w	r1, r1, #31
 80014a0:	2301      	movs	r3, #1
 80014a2:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014a6:	6a03      	ldr	r3, [r0, #32]
 80014a8:	ea23 0304 	bic.w	r3, r3, r4
 80014ac:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80014ae:	6a03      	ldr	r3, [r0, #32]
 80014b0:	408a      	lsls	r2, r1
 80014b2:	4313      	orrs	r3, r2
 80014b4:	6203      	str	r3, [r0, #32]
}
 80014b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_TIM_PWM_Start>:
{
 80014bc:	b510      	push	{r4, lr}
 80014be:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014c0:	2201      	movs	r2, #1
 80014c2:	6800      	ldr	r0, [r0, #0]
 80014c4:	f7ff ffe9 	bl	800149a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_PWM_Start+0x3c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_TIM_PWM_Start+0x1c>
 80014d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d103      	bne.n	80014e0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80014d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e0:	6822      	ldr	r2, [r4, #0]
 80014e2:	6893      	ldr	r3, [r2, #8]
 80014e4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d003      	beq.n	80014f4 <HAL_TIM_PWM_Start+0x38>
    __HAL_TIM_ENABLE(htim);
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	2000      	movs	r0, #0
 80014f6:	bd10      	pop	{r4, pc}
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d03b      	beq.n	800157c <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8001504:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001506:	2301      	movs	r3, #1
 8001508:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800150c:	2302      	movs	r3, #2
 800150e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001512:	6803      	ldr	r3, [r0, #0]
 8001514:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001516:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001518:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800151c:	680a      	ldr	r2, [r1, #0]
 800151e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001522:	6803      	ldr	r3, [r0, #0]
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01a      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800152a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800152e:	d017      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001530:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001534:	4293      	cmp	r3, r2
 8001536:	d013      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800153c:	4293      	cmp	r3, r2
 800153e:	d00f      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001544:	4293      	cmp	r3, r2
 8001546:	d00b      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001548:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001550:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001554:	4293      	cmp	r3, r2
 8001556:	d003      	beq.n	8001560 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001558:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800155c:	4293      	cmp	r3, r2
 800155e:	d104      	bne.n	800156a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001560:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001564:	684a      	ldr	r2, [r1, #4]
 8001566:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001568:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001570:	2300      	movs	r3, #0
 8001572:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001576:	4618      	mov	r0, r3
}
 8001578:	bc30      	pop	{r4, r5}
 800157a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800157c:	2002      	movs	r0, #2
}
 800157e:	4770      	bx	lr
 8001580:	40010000 	.word	0x40010000

08001584 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001584:	4770      	bx	lr

08001586 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001586:	4770      	bx	lr

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	2400      	movs	r4, #0
 800158e:	9403      	str	r4, [sp, #12]
 8001590:	9404      	str	r4, [sp, #16]
 8001592:	9405      	str	r4, [sp, #20]
 8001594:	9406      	str	r4, [sp, #24]
 8001596:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	9400      	str	r4, [sp, #0]
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_GPIO_Init+0x94>)
 800159c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a6:	f002 0201 	and.w	r2, r2, #1
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	9401      	str	r4, [sp, #4]
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	f002 0204 	and.w	r2, r2, #4
 80015be:	9201      	str	r2, [sp, #4]
 80015c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	9402      	str	r4, [sp, #8]
 80015c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c6:	f042 0202 	orr.w	r2, r2, #2
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Green_LED_Pin|Red_LED_Pin|EN_A_Pin, GPIO_PIN_RESET);
 80015d6:	4f12      	ldr	r7, [pc, #72]	; (8001620 <MX_GPIO_Init+0x98>)
 80015d8:	4622      	mov	r2, r4
 80015da:	2170      	movs	r1, #112	; 0x70
 80015dc:	4638      	mov	r0, r7
 80015de:	f7ff f911 	bl	8000804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN_L_A_Pin|IN_H3_A_Pin|IN_H2_A_Pin|IN_H1_A_Pin, GPIO_PIN_RESET);
 80015e2:	4d10      	ldr	r5, [pc, #64]	; (8001624 <MX_GPIO_Init+0x9c>)
 80015e4:	4622      	mov	r2, r4
 80015e6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015ea:	4628      	mov	r0, r5
 80015ec:	f7ff f90a 	bl	8000804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin EN_A_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|EN_A_Pin;
 80015f0:	2370      	movs	r3, #112	; 0x70
 80015f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2601      	movs	r6, #1
 80015f6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	a903      	add	r1, sp, #12
 80015fe:	4638      	mov	r0, r7
 8001600:	f7ff f81c 	bl	800063c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_L_A_Pin IN_H3_A_Pin IN_H2_A_Pin IN_H1_A_Pin */
  GPIO_InitStruct.Pin = IN_L_A_Pin|IN_H3_A_Pin|IN_H2_A_Pin|IN_H1_A_Pin;
 8001604:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001608:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	a903      	add	r1, sp, #12
 8001612:	4628      	mov	r0, r5
 8001614:	f7ff f812 	bl	800063c <HAL_GPIO_Init>

}
 8001618:	b009      	add	sp, #36	; 0x24
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020400 	.word	0x40020400

08001628 <accelerate>:
	percent = 0;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <accelerate+0x2c>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
	if(direction == 1 && increment < incrementLimit){
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <accelerate+0x30>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d000      	beq.n	8001638 <accelerate+0x10>
}
 8001636:	4770      	bx	lr
	if(direction == 1 && increment < incrementLimit){
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <accelerate+0x2c>)
 800163a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <accelerate+0x30>)
 8001640:	6852      	ldr	r2, [r2, #4]
 8001642:	4293      	cmp	r3, r2
 8001644:	daf7      	bge.n	8001636 <accelerate+0xe>
		flag = (increment == incrementLimit)?1:0;
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <accelerate+0x2c>)
 8001648:	2100      	movs	r1, #0
 800164a:	60d1      	str	r1, [r2, #12]
		increment++;
 800164c:	3301      	adds	r3, #1
 800164e:	8093      	strh	r3, [r2, #4]
}
 8001650:	e7f1      	b.n	8001636 <accelerate+0xe>
 8001652:	bf00      	nop
 8001654:	200010b0 	.word	0x200010b0
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_TIM_PeriodElapsedCallback>:
{
 800165c:	b508      	push	{r3, lr}
	if(percent >= percentLimit){
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001664:	6892      	ldr	r2, [r2, #8]
 8001666:	4293      	cmp	r3, r2
 8001668:	da03      	bge.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x16>
		percent++;
 800166a:	3301      	adds	r3, #1
 800166c:	4a02      	ldr	r2, [pc, #8]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800166e:	6093      	str	r3, [r2, #8]
}
 8001670:	bd08      	pop	{r3, pc}
 		accelerate();
 8001672:	f7ff ffd9 	bl	8001628 <accelerate>
 8001676:	e7fb      	b.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001678:	200010b0 	.word	0x200010b0
 800167c:	20000008 	.word	0x20000008

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	e7fe      	b.n	8001680 <Error_Handler>
	...

08001684 <MX_TIM2_Init>:
{
 8001684:	b500      	push	{lr}
 8001686:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001688:	2300      	movs	r3, #0
 800168a:	930a      	str	r3, [sp, #40]	; 0x28
 800168c:	930b      	str	r3, [sp, #44]	; 0x2c
 800168e:	930c      	str	r3, [sp, #48]	; 0x30
 8001690:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	9308      	str	r3, [sp, #32]
 8001694:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	9305      	str	r3, [sp, #20]
 80016a0:	9306      	str	r3, [sp, #24]
 80016a2:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80016a4:	4827      	ldr	r0, [pc, #156]	; (8001744 <MX_TIM2_Init+0xc0>)
 80016a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016aa:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 32;
 80016ac:	2220      	movs	r2, #32
 80016ae:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 128;
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ba:	f7ff fd9d 	bl	80011f8 <HAL_TIM_Base_Init>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d132      	bne.n	8001728 <MX_TIM2_Init+0xa4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	a90e      	add	r1, sp, #56	; 0x38
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016cc:	481d      	ldr	r0, [pc, #116]	; (8001744 <MX_TIM2_Init+0xc0>)
 80016ce:	f7ff fe77 	bl	80013c0 <HAL_TIM_ConfigClockSource>
 80016d2:	bb58      	cbnz	r0, 800172c <MX_TIM2_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d4:	481b      	ldr	r0, [pc, #108]	; (8001744 <MX_TIM2_Init+0xc0>)
 80016d6:	f7ff fda8 	bl	800122a <HAL_TIM_PWM_Init>
 80016da:	bb48      	cbnz	r0, 8001730 <MX_TIM2_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	a908      	add	r1, sp, #32
 80016e4:	4817      	ldr	r0, [pc, #92]	; (8001744 <MX_TIM2_Init+0xc0>)
 80016e6:	f7ff ff09 	bl	80014fc <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	bb18      	cbnz	r0, 8001734 <MX_TIM2_Init+0xb0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80016f0:	2200      	movs	r2, #0
 80016f2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f8:	a901      	add	r1, sp, #4
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <MX_TIM2_Init+0xc0>)
 80016fc:	f7ff fde6 	bl	80012cc <HAL_TIM_PWM_ConfigChannel>
 8001700:	b9d0      	cbnz	r0, 8001738 <MX_TIM2_Init+0xb4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001702:	2204      	movs	r2, #4
 8001704:	eb0d 0102 	add.w	r1, sp, r2
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <MX_TIM2_Init+0xc0>)
 800170a:	f7ff fddf 	bl	80012cc <HAL_TIM_PWM_ConfigChannel>
 800170e:	b9a8      	cbnz	r0, 800173c <MX_TIM2_Init+0xb8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001710:	2208      	movs	r2, #8
 8001712:	a901      	add	r1, sp, #4
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <MX_TIM2_Init+0xc0>)
 8001716:	f7ff fdd9 	bl	80012cc <HAL_TIM_PWM_ConfigChannel>
 800171a:	b988      	cbnz	r0, 8001740 <MX_TIM2_Init+0xbc>
  HAL_TIM_MspPostInit(&htim2);
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MX_TIM2_Init+0xc0>)
 800171e:	f000 f957 	bl	80019d0 <HAL_TIM_MspPostInit>
}
 8001722:	b00f      	add	sp, #60	; 0x3c
 8001724:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001728:	f7ff ffaa 	bl	8001680 <Error_Handler>
    Error_Handler();
 800172c:	f7ff ffa8 	bl	8001680 <Error_Handler>
    Error_Handler();
 8001730:	f7ff ffa6 	bl	8001680 <Error_Handler>
    Error_Handler();
 8001734:	f7ff ffa4 	bl	8001680 <Error_Handler>
    Error_Handler();
 8001738:	f7ff ffa2 	bl	8001680 <Error_Handler>
    Error_Handler();
 800173c:	f7ff ffa0 	bl	8001680 <Error_Handler>
    Error_Handler();
 8001740:	f7ff ff9e 	bl	8001680 <Error_Handler>
 8001744:	200010d4 	.word	0x200010d4

08001748 <SystemClock_Config>:
{
 8001748:	b500      	push	{lr}
 800174a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174c:	2230      	movs	r2, #48	; 0x30
 800174e:	2100      	movs	r1, #0
 8001750:	a808      	add	r0, sp, #32
 8001752:	f000 fa03 	bl	8001b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001756:	2300      	movs	r3, #0
 8001758:	9303      	str	r3, [sp, #12]
 800175a:	9304      	str	r3, [sp, #16]
 800175c:	9305      	str	r3, [sp, #20]
 800175e:	9306      	str	r3, [sp, #24]
 8001760:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <SystemClock_Config+0x80>)
 8001766:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001768:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800176c:	6411      	str	r1, [r2, #64]	; 0x40
 800176e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001770:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <SystemClock_Config+0x84>)
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001782:	6011      	str	r1, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800178a:	9202      	str	r2, [sp, #8]
 800178c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178e:	2202      	movs	r2, #2
 8001790:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001792:	2201      	movs	r2, #1
 8001794:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001796:	2210      	movs	r2, #16
 8001798:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800179a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	a808      	add	r0, sp, #32
 800179e:	f7ff f837 	bl	8000810 <HAL_RCC_OscConfig>
 80017a2:	b968      	cbnz	r0, 80017c0 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a4:	230f      	movs	r3, #15
 80017a6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017a8:	2100      	movs	r1, #0
 80017aa:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ae:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b0:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017b2:	a803      	add	r0, sp, #12
 80017b4:	f7ff fa76 	bl	8000ca4 <HAL_RCC_ClockConfig>
 80017b8:	b920      	cbnz	r0, 80017c4 <SystemClock_Config+0x7c>
}
 80017ba:	b015      	add	sp, #84	; 0x54
 80017bc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017c0:	f7ff ff5e 	bl	8001680 <Error_Handler>
    Error_Handler();
 80017c4:	f7ff ff5c 	bl	8001680 <Error_Handler>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <main>:
{
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80017d2:	f7fe fe9d 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 80017d6:	f7ff ffb7 	bl	8001748 <SystemClock_Config>
  MX_GPIO_Init();
 80017da:	f7ff fed5 	bl	8001588 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017de:	f7ff ff51 	bl	8001684 <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e2:	4c58      	ldr	r4, [pc, #352]	; (8001944 <main+0x174>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff fe68 	bl	80014bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017ec:	2104      	movs	r1, #4
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fe64 	bl	80014bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80017f4:	2108      	movs	r1, #8
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fe60 	bl	80014bc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fbc4 	bl	8000f8a <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, EN_A_Pin, 1); // turns on en-gate, allows for writing to motor pins
 8001802:	4c51      	ldr	r4, [pc, #324]	; (8001948 <main+0x178>)
 8001804:	2201      	movs	r2, #1
 8001806:	2140      	movs	r1, #64	; 0x40
 8001808:	4620      	mov	r0, r4
 800180a:	f7fe fffb 	bl	8000804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN_L_A_Pin, 1); // for 3x PWM on DRV830x, necessary driving
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001814:	484d      	ldr	r0, [pc, #308]	; (800194c <main+0x17c>)
 8001816:	f7fe fff5 	bl	8000804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Green_LED_Pin, 1);  // enables the green light as a status light
 800181a:	2201      	movs	r2, #1
 800181c:	2110      	movs	r1, #16
 800181e:	4620      	mov	r0, r4
 8001820:	f7fe fff0 	bl	8000804 <HAL_GPIO_WritePin>
 8001824:	e055      	b.n	80018d2 <main+0x102>
			HAL_GPIO_WritePin(GPIOC, Red_LED_Pin, 1);
 8001826:	2201      	movs	r2, #1
 8001828:	2120      	movs	r1, #32
 800182a:	4847      	ldr	r0, [pc, #284]	; (8001948 <main+0x178>)
 800182c:	f7fe ffea 	bl	8000804 <HAL_GPIO_WritePin>
 8001830:	e05b      	b.n	80018ea <main+0x11a>
		else if(arrayPos2 >= size){
 8001832:	4288      	cmp	r0, r1
 8001834:	db76      	blt.n	8001924 <main+0x154>
			arrayPos2 %= size;
 8001836:	fb90 f3f1 	sdiv	r3, r0, r1
 800183a:	fb01 0013 	mls	r0, r1, r3, r0
 800183e:	4b44      	ldr	r3, [pc, #272]	; (8001950 <main+0x180>)
 8001840:	60d8      	str	r0, [r3, #12]
			set2 = !set2;
 8001842:	4a44      	ldr	r2, [pc, #272]	; (8001954 <main+0x184>)
 8001844:	f9b2 3016 	ldrsh.w	r3, [r2, #22]
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	82d3      	strh	r3, [r2, #22]
		short c = TIM2->CNT;
 8001850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	b21b      	sxth	r3, r3
		short one = lookUp[arrayPos1] - 128 > c;
 8001858:	493f      	ldr	r1, [pc, #252]	; (8001958 <main+0x188>)
 800185a:	4e3e      	ldr	r6, [pc, #248]	; (8001954 <main+0x184>)
 800185c:	6932      	ldr	r2, [r6, #16]
 800185e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001862:	3a80      	subs	r2, #128	; 0x80
 8001864:	429a      	cmp	r2, r3
 8001866:	bfd4      	ite	le
 8001868:	2200      	movle	r2, #0
 800186a:	2201      	movgt	r2, #1
		short two = lookUp[arrayPos2] - 128 > c;
 800186c:	4838      	ldr	r0, [pc, #224]	; (8001950 <main+0x180>)
 800186e:	68c4      	ldr	r4, [r0, #12]
 8001870:	f931 5014 	ldrsh.w	r5, [r1, r4, lsl #1]
 8001874:	3d80      	subs	r5, #128	; 0x80
 8001876:	42ab      	cmp	r3, r5
 8001878:	bfac      	ite	ge
 800187a:	2500      	movge	r5, #0
 800187c:	2501      	movlt	r5, #1
		short three = lookUp[arrayPos3] - 128 > c;
 800187e:	6900      	ldr	r0, [r0, #16]
 8001880:	f931 4010 	ldrsh.w	r4, [r1, r0, lsl #1]
 8001884:	3c80      	subs	r4, #128	; 0x80
 8001886:	42a3      	cmp	r3, r4
 8001888:	bfac      	ite	ge
 800188a:	2400      	movge	r4, #0
 800188c:	2401      	movlt	r4, #1
		HAL_GPIO_WritePin(GPIOB, IN_H1_A_Pin, !(set1^one));
 800188e:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8001892:	4f2e      	ldr	r7, [pc, #184]	; (800194c <main+0x17c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf14      	ite	ne
 8001898:	2200      	movne	r2, #0
 800189a:	2201      	moveq	r2, #1
 800189c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a0:	4638      	mov	r0, r7
 80018a2:	f7fe ffaf 	bl	8000804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN_H2_A_Pin, !(set2^two));
 80018a6:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 80018aa:	42aa      	cmp	r2, r5
 80018ac:	bf14      	ite	ne
 80018ae:	2200      	movne	r2, #0
 80018b0:	2201      	moveq	r2, #1
 80018b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b6:	4638      	mov	r0, r7
 80018b8:	f7fe ffa4 	bl	8000804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN_H3_A_Pin, !(set3^three));
 80018bc:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 80018c0:	42a2      	cmp	r2, r4
 80018c2:	bf14      	ite	ne
 80018c4:	2200      	movne	r2, #0
 80018c6:	2201      	moveq	r2, #1
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	4638      	mov	r0, r7
 80018ce:	f7fe ff99 	bl	8000804 <HAL_GPIO_WritePin>
		if(increment == incrementLimit)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <main+0x184>)
 80018d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <main+0x180>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d0a2      	beq.n	8001826 <main+0x56>
			HAL_GPIO_WritePin(GPIOC, Red_LED_Pin, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2120      	movs	r1, #32
 80018e4:	4818      	ldr	r0, [pc, #96]	; (8001948 <main+0x178>)
 80018e6:	f7fe ff8d 	bl	8000804 <HAL_GPIO_WritePin>
		arrayPos1 += increment;
 80018ea:	491a      	ldr	r1, [pc, #104]	; (8001954 <main+0x184>)
 80018ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80018f0:	690a      	ldr	r2, [r1, #16]
 80018f2:	441a      	add	r2, r3
 80018f4:	610a      	str	r2, [r1, #16]
		arrayPos2 += increment;
 80018f6:	4916      	ldr	r1, [pc, #88]	; (8001950 <main+0x180>)
 80018f8:	68c8      	ldr	r0, [r1, #12]
 80018fa:	4418      	add	r0, r3
 80018fc:	60c8      	str	r0, [r1, #12]
		arrayPos3 += increment;
 80018fe:	690c      	ldr	r4, [r1, #16]
 8001900:	4423      	add	r3, r4
 8001902:	610b      	str	r3, [r1, #16]
		if(arrayPos1 >= size){
 8001904:	6949      	ldr	r1, [r1, #20]
 8001906:	428a      	cmp	r2, r1
 8001908:	db93      	blt.n	8001832 <main+0x62>
			arrayPos1 %= size;
 800190a:	4c12      	ldr	r4, [pc, #72]	; (8001954 <main+0x184>)
 800190c:	fb92 f0f1 	sdiv	r0, r2, r1
 8001910:	fb01 2210 	mls	r2, r1, r0, r2
 8001914:	6122      	str	r2, [r4, #16]
			set1 = !set1;
 8001916:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	82a3      	strh	r3, [r4, #20]
 8001922:	e795      	b.n	8001850 <main+0x80>
		else if(arrayPos3 >= size){
 8001924:	428b      	cmp	r3, r1
 8001926:	db93      	blt.n	8001850 <main+0x80>
			arrayPos3 %= size;
 8001928:	fb93 f0f1 	sdiv	r0, r3, r1
 800192c:	fb01 3310 	mls	r3, r1, r0, r3
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <main+0x180>)
 8001932:	6113      	str	r3, [r2, #16]
			set3 = !set3;
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <main+0x184>)
 8001936:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	8313      	strh	r3, [r2, #24]
 8001942:	e785      	b.n	8001850 <main+0x80>
 8001944:	200010d4 	.word	0x200010d4
 8001948:	40020800 	.word	0x40020800
 800194c:	40020400 	.word	0x40020400
 8001950:	20000008 	.word	0x20000008
 8001954:	200010b0 	.word	0x200010b0
 8001958:	20000020 	.word	0x20000020

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2100      	movs	r1, #0
 8001960:	9100      	str	r1, [sp, #0]
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_MspInit+0x34>)
 8001964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
 800196c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800196e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	9101      	str	r1, [sp, #4]
 8001978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	b002      	add	sp, #8
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001994:	6803      	ldr	r3, [r0, #0]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d000      	beq.n	800199e <HAL_TIM_Base_MspInit+0xa>
 800199c:	4770      	bx	lr
{
 800199e:	b500      	push	{lr}
 80019a0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a2:	2100      	movs	r1, #0
 80019a4:	9101      	str	r1, [sp, #4]
 80019a6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80019aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019bc:	460a      	mov	r2, r1
 80019be:	201c      	movs	r0, #28
 80019c0:	f7fe fde4 	bl	800058c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c4:	201c      	movs	r0, #28
 80019c6:	f7fe fe15 	bl	80005f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ca:	b003      	add	sp, #12
 80019cc:	f85d fb04 	ldr.w	pc, [sp], #4

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2300      	movs	r3, #0
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	9305      	str	r3, [sp, #20]
 80019dc:	9306      	str	r3, [sp, #24]
 80019de:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 80019e0:	6803      	ldr	r3, [r0, #0]
 80019e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e6:	d001      	beq.n	80019ec <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019e8:	b008      	add	sp, #32
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	2400      	movs	r4, #0
 80019ee:	9401      	str	r4, [sp, #4]
 80019f0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80019f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	f002 0201 	and.w	r2, r2, #1
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	9402      	str	r4, [sp, #8]
 8001a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0a:	f042 0202 	orr.w	r2, r2, #2
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001a1a:	2324      	movs	r3, #36	; 0x24
 8001a1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2602      	movs	r6, #2
 8001a20:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2501      	movs	r5, #1
 8001a24:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	a903      	add	r1, sp, #12
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_TIM_MspPostInit+0x74>)
 8001a2a:	f7fe fe07 	bl	800063c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a38:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	a903      	add	r1, sp, #12
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <HAL_TIM_MspPostInit+0x78>)
 8001a3e:	f7fe fdfd 	bl	800063c <HAL_GPIO_Init>
}
 8001a42:	e7d1      	b.n	80019e8 <HAL_TIM_MspPostInit+0x18>
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400

08001a4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a4c:	4770      	bx	lr

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler>

08001a56 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5e:	f7fe fd71 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a62:	bd08      	pop	{r3, pc}

08001a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a66:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM2_IRQHandler+0xc>)
 8001a68:	f7ff faa5 	bl	8000fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a6c:	bd08      	pop	{r3, pc}
 8001a6e:	bf00      	nop
 8001a70:	200010d4 	.word	0x200010d4

08001a74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a74:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <SystemInit+0x40>)
 8001a76:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <SystemInit+0x44>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x48>)
 8001a9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001aa8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001aae:	608b      	str	r3, [r1, #8]
#endif
}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	24003010 	.word	0x24003010

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ac6:	e003      	b.n	8001ad0 <LoopCopyDataInit>

08001ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ace:	3104      	adds	r1, #4

08001ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ad8:	d3f6      	bcc.n	8001ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001adc:	e002      	b.n	8001ae4 <LoopFillZerobss>

08001ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ae0:	f842 3b04 	str.w	r3, [r2], #4

08001ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ae8:	d3f9      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffc3 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f000 f811 	bl	8001b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fe6d 	bl	80017d0 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001afc:	08001bac 	.word	0x08001bac
  ldr  r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b04:	20001094 	.word	0x20001094
  ldr  r2, =_sbss
 8001b08:	20001094 	.word	0x20001094
  ldr  r3, = _ebss
 8001b0c:	20001114 	.word	0x20001114

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <__libc_init_array>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4e0d      	ldr	r6, [pc, #52]	; (8001b4c <__libc_init_array+0x38>)
 8001b18:	4c0d      	ldr	r4, [pc, #52]	; (8001b50 <__libc_init_array+0x3c>)
 8001b1a:	1ba4      	subs	r4, r4, r6
 8001b1c:	10a4      	asrs	r4, r4, #2
 8001b1e:	2500      	movs	r5, #0
 8001b20:	42a5      	cmp	r5, r4
 8001b22:	d109      	bne.n	8001b38 <__libc_init_array+0x24>
 8001b24:	4e0b      	ldr	r6, [pc, #44]	; (8001b54 <__libc_init_array+0x40>)
 8001b26:	4c0c      	ldr	r4, [pc, #48]	; (8001b58 <__libc_init_array+0x44>)
 8001b28:	f000 f820 	bl	8001b6c <_init>
 8001b2c:	1ba4      	subs	r4, r4, r6
 8001b2e:	10a4      	asrs	r4, r4, #2
 8001b30:	2500      	movs	r5, #0
 8001b32:	42a5      	cmp	r5, r4
 8001b34:	d105      	bne.n	8001b42 <__libc_init_array+0x2e>
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b3c:	4798      	blx	r3
 8001b3e:	3501      	adds	r5, #1
 8001b40:	e7ee      	b.n	8001b20 <__libc_init_array+0xc>
 8001b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b46:	4798      	blx	r3
 8001b48:	3501      	adds	r5, #1
 8001b4a:	e7f2      	b.n	8001b32 <__libc_init_array+0x1e>
 8001b4c:	08001ba4 	.word	0x08001ba4
 8001b50:	08001ba4 	.word	0x08001ba4
 8001b54:	08001ba4 	.word	0x08001ba4
 8001b58:	08001ba8 	.word	0x08001ba8

08001b5c <memset>:
 8001b5c:	4402      	add	r2, r0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d100      	bne.n	8001b66 <memset+0xa>
 8001b64:	4770      	bx	lr
 8001b66:	f803 1b01 	strb.w	r1, [r3], #1
 8001b6a:	e7f9      	b.n	8001b60 <memset+0x4>

08001b6c <_init>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr

08001b78 <_fini>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr
